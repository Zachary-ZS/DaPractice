The Perfect Stall

总时间限制: 1000ms 内存限制: 65536kB
描述
Farmer John completed his new barn just last week, complete with all the latest milking technology. Unfortunately, due to engineering problems, all the stalls in the new barn are different. For the first week, Farmer John randomly assigned cows to stalls, but it quickly became clear that any given cow was only willing to produce milk in certain stalls. For the last week, Farmer John has been collecting data on which cows are willing to produce milk in which stalls. A stall may be only assigned to one cow, and, of course, a cow may be only assigned to one stall. 
Given the preferences of the cows, compute the maximum number of milk-producing assignments of cows to stalls that is possible. 
输入
The input includes several cases. For each case, the first line contains two integers, N (0 <= N <= 200) and M (0 <= M <= 200). N is the number of cows that Farmer John has and M is the number of stalls in the new barn. Each of the following N lines corresponds to a single cow. The first integer (Si) on the line is the number of stalls that the cow is willing to produce milk in (0 <= Si <= M). The subsequent Si integers on that line are the stalls in which that cow is willing to produce milk. The stall numbers will be integers in the range (1..M), and no stall will be listed twice for a given cow.
输出
For each case, output a single line with a single integer, the maximum number of milk-producing stall assignments that can be made.
样例输入
5 5
2 2 5
3 2 3 4
2 1 5
3 1 2 5
1 2 
样例输出
4
来源
USACO 40

Answer：
二部图最大匹配，模板KO

#include <iostream>
#include <stack>
#include <map>
#include <list>
#include <set>
#include <deque>
#include <queue>
#include <vector>
#include <algorithm>
#include <cstdio>
#include <string.h>
#include <string>
#include <cstring>
using namespace std;

#define inf 0x3f3f3f3f
#define maxn 208
#define maxm 208
int G[maxn + maxm][maxn + maxm];
bool Visited[maxn + maxm];
int Layer[maxn + maxm]; //Layer[i]是节点i的层号
int n, m, mt, p;	//0是源点， mt是汇点

bool CountLayer(){ //分层
	int layer = 0;
	deque<int> q;
	memset(Layer, 0xff, sizeof(Layer)); //都初始化成-1
	Layer[0] = 0;
	q.push_back(0);
	while (!q.empty())
	{
		int v = q.front();
		q.pop_front();
		for (int j = 0; j <= mt; j++)
		{
			if (G[v][j] > 0 && Layer[j] == -1)
			{
				//Layer[j] == -1 说明j还没有访问过
				Layer[j] = Layer[v] + 1;
				if (j == mt)
					return true; //分层到汇点即可
				else
					q.push_back(j);
			}
		}
	}
	return false;
}

int Dinic(){
	int i;
	int s;
	int nMaxFlow = 0;
	deque<int> q; //DFS用的栈
	while (CountLayer())
	{					//只要能分层
		q.push_back(0); //源点入栈
		memset(Visited, 0, sizeof(Visited));
		Visited[0] = 1;
		while (!q.empty())
		{
			int nd = q.back();
			if (nd == mt)
			{ // nd是汇点
				//在栈中找容量最小边
				int nMinC = inf;
				int nMinC_vs; //容量最小边的起点
				for (i = 1; i < q.size(); i++)
				{
					int vs = q[i - 1];
					int ve = q[i];
					if (G[vs][ve] > 0)
					{
						if (nMinC > G[vs][ve])
						{
							nMinC = G[vs][ve];
							nMinC_vs = vs;
						}
					}
				}
				//增广，改图
				nMaxFlow += nMinC;
				for (i = 1; i < q.size(); i++)
				{
					int vs = q[i - 1];
					int ve = q[i];
					G[vs][ve] -= nMinC; //修改边容量
					G[ve][vs] += nMinC; //添加反向边
				}
				//退栈到 nMinC_vs成为栈顶，以便继续dfs
				while (!q.empty() && q.back() != nMinC_vs)
				{
					Visited[q.back()] = 0;
					q.pop_back();
				}
			}
			else
			{ //nd不是汇点
				for (i = 0; i <= mt; i++)
				{
					if (G[nd][i] > 0 && Layer[i] == Layer[nd] + 1 &&
						!Visited[i])
					{
						//只往下一层的没有走过的节点走
						Visited[i] = 1;
						q.push_back(i);
						break;
					}
				}

				if (i > mt)		  //找不到下一个点
					q.pop_back(); //回溯
			}
		}
	}
	return nMaxFlow;
}



int main()
{
	while (scanf("%d%d", &n, &m) != EOF){
		// 1 - n means cows; n+1 - n+m means stalls;
		memset(G, 0, sizeof(G));
		memset(Visited, 0, sizeof(Visited));
		for (int i = 1; i <= n; i++){
			int tqp, tmp;
			scanf("%d", &tqp);
			for (int j = 1; j <= tqp; j++){
				scanf("%d", &tmp);
				G[i][tmp + n] = 1;
			}
			G[0][i] = 1;
		}
		mt = n + m + 1;
		for (int i = n + 1; i <= n + m; i++)
			G[i][mt] = 1;
		printf("%d\n", Dinic());
	}
	

	system("pause");
	return 0;
}