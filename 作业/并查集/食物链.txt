食物链

描述
动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。A吃B， B吃C，C吃A。
现有N个动物，以1－N编号。每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。
有人用两种说法对这N个动物所构成的食物链关系进行描述：
第一种说法是"1 X Y"，表示X和Y是同类。
第二种说法是"2 X Y"，表示X吃Y。
此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。当一句话满足下列三条之一时，这句话就是假话，否则就是真话。
1） 当前的话与前面的某些真的话冲突，就是假话；
2） 当前的话中X或Y比N大，就是假话；
3） 当前的话表示X吃X，就是假话。
你的任务是根据给定的N（1 <= N <= 50,000）和K句话（0 <= K <= 100,000），输出假话的总数。
输入
第一行是两个整数N和K，以一个空格分隔。
以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。
若D=1，则表示X和Y是同类。
若D=2，则表示X吃Y。
输出
只有一个整数，表示假话的数目。
样例输入
100 7
1 101 1 
2 1 2
2 2 3 
2 3 3 
1 1 3 
2 3 1 
1 5 5
样例输出
3

代码：

#include<iostream>
#include<stack>
#include<map>
#include<queue>
#include<cstdio>
#include<string.h>
#include<string>
using namespace std;

int parent[50008] = { 0 }, relation[50008] = { 0 };
//   relation: 0 means the same class; 1 means parent eats on it; 
// 2 means oppositly.
int n, k; // n creatures and k sentences.
int fake = 0;

int find(int p) {
	if (parent[p] == p)
		return p;
	else {
		int tmp = find(parent[p]);
		relation[p] = (relation[p] + relation[parent[p]]) % 3;
		return parent[p] = tmp;
	}
}
void Union(int x, int y, int opt) {
	int a = find(x), b = find(y);
	if (a != b) {
		parent[a] = parent[b];
		relation[a] = ((opt == 1 ? 0 : 2)+relation[y]+3-relation[x])%3;
	}
}

int main() {
	scanf("%d %d", &n, &k);
	for (int i = 1; i <= n; i++)
		parent[i] = i;

	int opt, x, y;
	for (; k; k--) {
		scanf("%d %d %d", &opt, &x, &y);
		if (x > n || y > n) {
			fake++;
			continue;
		}
		if (opt == 1) {
			int a = find(x), b = find(y);
			if ((a == b)&&(relation[x] != relation[y])) {
				fake++;
				continue;
			}
			else if (a != b)
				Union(x, y, 1);
		}
		else if (opt == 2) {
			int a = find(x), b = find(y);
			if (a == b) {
				int relatob = (relation[x] + 3 - relation[y]) % 3;
				if (relatob == 2)
					continue;
				fake++;
			}
			else if (a != b) {
				Union(x, y, 2);
			}
		}
	}

	printf("%d\n", fake);
	return 0;
}