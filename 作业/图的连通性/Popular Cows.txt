Popular Cows

总时间限制: 2000ms 内存限制: 65536kB
描述
Every cow's dream is to become the most popular cow in the herd. In a herd of N (1 <= N <= 10,000) cows, you are given up to M (1 <= M <= 50,000) ordered pairs of the form (A, B) that tell you that cow A thinks that cow B is popular. Since popularity is transitive, if A thinks B is popular and B thinks C is popular, then A will also think that C is 
popular, even if this is not explicitly specified by an ordered pair in the input. Your task is to compute the number of cows that are considered popular by every other cow.
输入
* Line 1: Two space-separated integers, N and M

* Lines 2..1+M: Two space-separated numbers A and B, meaning that A thinks B is popular.
输出
* Line 1: A single integer that is the number of cows who are considered popular by every other cow.
样例输入
3 3
1 2
2 1
2 3
样例输出
1
提示
Cow 3 is the only cow of high popularity.
来源
USACO 2003 Fall

Answer：

#include<iostream>
#include<stack>
#include<map>
#include<list>
#include<set>
#include<queue>
#include<vector>
#include<algorithm>
#include<cstdio>
#include<string.h>
#include<string>
using namespace std;

#define maxn 10010
#define maxm 50010
int n, m;

int tim = 0;
int dfn[maxn] = { 0 };
int low[maxn] = { 0 };
int visited[maxn] = { 0 };
int clas[maxn] = { 0 };
int outdg[maxn] = { 0 };
int clasnum = 0;
vector<int> G[maxn];
stack<int> Stack;

void tarjan(int rt) {
	visited[rt] = 1;
	dfn[rt] = low[rt] = ++tim;
	Stack.push(rt);
	for (int i = 0; i < G[rt].size(); i++) {
		int tmp = G[rt][i];
		if (!visited[tmp]) {
 			tarjan(tmp);
			low[rt] = min(low[rt], low[tmp]);
		}
		else if (visited[tmp] == 1)
			low[rt] = min(low[rt], dfn[tmp]);
		
	}
	if (dfn[rt] == low[rt]) {
		clasnum++;
		int tmp = Stack.top();
		Stack.pop();
		visited[tmp] = 2;
		clas[tmp] = clasnum;
		while (tmp != rt) {
			tmp = Stack.top();
			Stack.pop();
			visited[tmp] = 2;
			clas[tmp] = clasnum;
		}

	}


}

void newdag() {
	// Here I didn't discard the repeated edges, cuz it doesn't matter
	for (int i = 1; i <= n; i++)
		for (int j = 0; j < G[i].size(); j++)
			if (clas[i] != clas[G[i][j]])
				outdg[clas[i]]++;
	int nzero = 0, index = 0;
	for (int i = 1; i <= clasnum; i++) {
		if (!outdg[i]) {
			nzero++;
			index = i;
			if (nzero >= 2) {
				printf("0\n");
				return;
			}
		}
	}
	nzero = 0;
	for (int i = 1; i <= n; i++)
		if (clas[i] == index)
			nzero++;
	printf("%d\n", nzero);

}

int main() {

	scanf("%d %d", &n, &m);
	int ta, tb;
	while (m--) {
		scanf("%d %d", &ta, &tb);
		G[ta].push_back(tb);
	}
	for (int i = 1; i <= n; i++)
		if (!visited[i])
			tarjan(i);
	newdag();
	return 0;
}